type Geocode {
  latitude: Float!
  longitude: Float!
}

schema {
  mutation: Mutation
  subscription: Subscription
}

type Address {
  address1stLine: String
  postcode: String!
  geocode: Geocode
}

type GeocodedAddress {
  address1stLine: String!
  postcode: String!
  geocode: Geocode!
}

type AvailabilityWindow {
  startTime: String!
  endTime: String!
}

type WeekAvailability {
  Monday: [AvailabilityWindow!]!
  Tuesday: [AvailabilityWindow!]!
  Wednesday: [AvailabilityWindow!]!
  Thursday: [AvailabilityWindow!]!
  Friday: [AvailabilityWindow!]!
  Saturday: [AvailabilityWindow!]!
  Sunday: [AvailabilityWindow!]!
}

type Model {
  id: ID!
  modelTypeID: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int!
}

type AreaModel @inherit(from: "Model") {
  areaCode: String!
  id: ID!
  modelTypeID: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int!
}

type NameModel {
  firstNames: String!
  lastName: String!
  staticKey: String
}

type Student @inherit(from: ["NameModel"]) {
  yearGroup: String!
  defaultAvailability: WeekAvailability
  firstNames: String!
  lastName: String!
  staticKey: String
}

type StudentModel @inherit(from: ["AreaModel", "Student"]) {
  areaCode: String!
  id: ID!
  modelTypeID: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int!
  yearGroup: String!
  defaultAvailability: WeekAvailability
  firstNames: String!
  lastName: String!
  staticKey: String
}

type Mutation {
  parentAddStudent(attributes: StudentInput): StudentModel!
}

type Subscription {
  onUserUpdate(attributes: StudentInput!): StudentModel @aws_subscribe(mutations: ["parentAddStudent"])
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input AvailabilityWindowInput {
  startTime: String!
  endTime: String!
}

input WeekAvailabilityInput {
  Monday: [AvailabilityWindowInput!]!
  Tuesday: [AvailabilityWindowInput!]!
  Wednesday: [AvailabilityWindowInput!]!
  Thursday: [AvailabilityWindowInput!]!
  Friday: [AvailabilityWindowInput!]!
  Saturday: [AvailabilityWindowInput!]!
  Sunday: [AvailabilityWindowInput!]!
}

input StudentInput {
  yearGroup: String!
  defaultAvailability: WeekAvailabilityInput
  firstNames: String!
  lastName: String!
  staticKey: String
}
